[
  {
    "id": 1,
    "title": "What is Low Level Design or LLD?",
    "path": "articles/1.json",
    "summary": "Low-Level Design (LLD) is the detailed design process in the software development process that focuses on implementing individual components described in the High-Level Design. It provides a blueprint for how each component in the system will function and process and it also includes UML Diagrams, data structures, and algorithms. The input to LLD is HLD i.e. LLD translates the HLD into smaller and more specific details."
  },
  {
    "id": 2,
    "title": "HeartBeats: How Distributed Systems Stay Alive?",
    "path": "articles/2.json",
    "summary": "Heartbeats are periodic signals used in distributed systems to monitor component health, detect failures, and ensure system reliability."
  },
  {
    "id": 3,
    "title": "How PayPal Supported a Billion Transactions Daily With Only 8 Virtual Machines",
    "path": "articles/3.json",
    "summary": "PayPal achieved extreme scalability by adopting the actor model using the Akka framework, allowing them to process a billion transactions per day with just 8 VMs, while tackling issues like network latency, resource wastage, and fault tolerance."
  },
  {
    "id": 4,
    "title": "10 Essential System Design Topics and Concepts",
    "path": "articles/4.json",
    "summary": "This article covers ten fundamental system design concepts, including scalability, fault tolerance, data storage, caching, messaging systems, microservices, security, performance optimization, design patterns, and trade-offs, providing a comprehensive guide to building robust and scalable systems."
  },
  {
    "id": 5,
    "title": "WhatsApp Engineering Practices for Extreme Scalability",
    "path": "articles/5.json",
    "summary": "WhatsApp achieved extreme scalability by focusing on core messaging, leveraging Erlang and existing open-source technologies, implementing diagonal scaling, maintaining a small team, and emphasizing performance monitoring and load testing."
  },
  {
    "id": "6",
    "title": "A Brief History of Scaling Netflix",
    "path": "articles/6.json",
    "summary": "Explore how Netflix evolved from a monolithic architecture to a global microservices giant by migrating to AWS, building its own CDN (Open Connect), and scaling backend, APIs, and edge systems to meet massive user demands."
  },
  {
    "id": 7,
    "title": "Capturing A Billion Emo(j)i-ons",
    "path": "articles/7.json",
    "summary": "This article discusses the technical architecture behind Hotstar's interactive Social Feed feature, focusing on how the system processes billions of emoji submissions during live events like cricket tournaments. It covers the systemâ€™s scalability, decomposition, and asynchronous processing, and explores the use of Kafka and Spark for efficient data handling and real-time delivery."
  }
]
